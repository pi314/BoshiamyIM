*ime-plugin.txt*          For Vim version 8.0             Last update：2017/04

                                           ime.vim plugin development document
==============================================================================
Index

1.  Introduction............................|ime-plugin-introduction|
    1.1 Plugin metadata.....................|ime-plugin-metadata|
2.  Folder structure........................|ime-plugin-structure|
    2.1 Plugin with huge data...............|ime-plugin-with-huge-data|
3.  Handler - the core of the plugin........|ime-plugin-handler()|
    3.1 Handler - complicated operations....|ime-plugin-complex-handler|
    3.2 Multiple submodes...................|ime-plugin-submodes|
4.  Choose a word...........................|ime-plugin-choose-word|
5.  Log message.............................|ime#log()|
6.  Script-local function in Vim 7.3........|ime-plugin-for-vim-7.3-funcref|

==============================================================================
1.  Introduction                                     *ime-plugin-introduction*

ime.vim is able to load third party plugins if they fit certain structure.

There are two kinds ot ime.vim plugins:

1)  Standalone plugins work as input modes, they show up in the menu when you
    are choosing input mode. They have their own icons and descriptions.

2)  Embedded plugins are embedded in every input mode,
    prior to the input modes.
    They can be considered as extensions to the input modes.

------------------------------------------------------------------------------
1.1 Plugin metadata                                      *ime-plugin-metadata*

To make your plugin recognizable to ime.vim, the plugin has to provide
necessary informations:

- Type: |string|, "standalone" or "embedded"
                                                          *ime-plugin-pattern*
- Pattern: |regex|, the string pattern that can be processed by this plugin

- Handler: |Funcref|, process the input string and returns the result.
           see |ime-plugin-handler()|.
                                                        *ime-plugin-trigger[]*
- Trigger: |List|[|string|], what keys should trigger this plugin to work

Standalone plugin should provide two additional informations:

- Icon: |string|, shown in mode selection menu and 'statusline'
- Description: |string|, shown in mode selection menu
                                                             *ime-plugin-name*
Further more, this plugin should decide a name: {plugin-name}
for user to add in |g:ime_plugins|.

These information are packed in one |dict| object
and returned through *ime_{plugin-name}#info()*:
>
    function ime_{plugin-name}#info()
        return {
            \ 'type': 'standalone' / 'embedded',
            \ 'pattern': {regex},
            \ 'handler': {function},
            \ 'icon': '[En]',
            \ 'description': {description},
            \ 'trigger': ['<space>', '3', '4', '6', ...],
            \ }
    endfunction
<
==============================================================================
2.  Folder structure                                    *ime-plugin-structure*

ime.vim plugins are suggested to place files in the following structure:
>
    {plugin-folder}/
    |-- autoload/
    |   `-- ime_{plugin-name}.vim
    `-- README
<
*ime_{plugin-name}.vim* is the main file of the plugin.

Suggested content is as following:
>
    function! ime_{plugin-name}#handler (matchobj, trigger)
        " plugin logic here
    endfunction

    function! ime_{plugin-name}#info()
        return {
            \ 'type': 'standalone',
            \ 'icon': '[eg]',
            \ 'description': 'An example',
            \ 'pattern': '.*$',
            \ 'handler': function('ime_{plugin-name}#handler'),
            \ 'trigger': ['<space>', '3', '4', '6', ...],
            \ }
    endfunction
<
Please adjust the content for your needs.
Note that the value of handler is function('ime_{plugin-name}#handler'),
     the quote marks are necessary.

Note that at least the file ime_{plugin-name}.vim and the function
ime_{plugin-name}#info() should follow the naming rule, otherwise ime.vim
will not load this plugin.

------------------------------------------------------------------------------
2.1 Plugin with huge data                          *ime-plugin-with-huge-data*

If you plugin needs to load huge data, Vim's |autoload| can help.

Add file *ime_{plugin-name}_table.vim* in {plugin-folder}/autoload:
>
    let s:table = {}
    let s:table['key_1'] = [...]
    let s:table['key_2'] = [...]
    ...
    let s:table['key_n'] = [...]

    function! ime_{plugin-name}_table#table ()
        return s:table
    endfunction
<

And adjust |ime_{plugin-name}.vim| to:
>
    let s:table = {}

    function! ime_{plugin-name}#handler (matchobj, trigger)
        if s:table == {}
            let s:table = ime_{plugin-name}_table#table()
        endif

        " plugin logic here
    endfunction

    function! ime_{plugin-name}#info()
        return {
            \ 'type': 'standalone',
            \ 'icon': '[eg]',
            \ 'description': 'An example',
            \ 'pattern': '.*$',
            \ 'handler': function('ime_{plugin-name}#handler'),
            \ 'trigger': ['<space>', '3', '4', '6', ...],
            \ }
    endfunction
<
==============================================================================
3.  Handler - the core of the plugin                    *ime-plugin-handler()*

The core function of the plugin is provided by the plugin handler.

When switching to a input method, ime.vim executes |inoremap| according to
|ime-plugin-trigger|.
If user pressed one of the trigger key, ime.vim passes the cursor line text
and |ime-plugin-pattern| to |matchlist()|.
If the matching succeed, the matching result (a |List|) and the trigger key
will be passed into handler.

|ime-plugin-handler()| processes the matching result and the trigger key,
and return a |List| containing availble options.
The ordering of the options could be decided by the handler.

The options then passed into |complete()| to generate completion menu,
every option could have description text.
For further information see |complete-items|.

The handler can leverage regex groups (see |\1|) in the pattern.

------------------------------------------------------------------------------
3.1 Handler - complicated operations              *ime-plugin-complex-handler*

Some plugins need to do very complicated operations, for example 嘸蝦米 does
multi-stage match and gave up part of strings every time.
This is very hard to achieve only with |ime-plugin-pattern|.

So, ime.vim allows handler to return a |dict| including two keys:

- "len": the text length that actually used
- "options": available options

For example if ime.vim matchs string ".[,stare" with the pattern and passed
into the handler, but the handler decides only ",stare" can be used to
generate "ಠ_ಠ".
In this situation the handler should return:
>
    {
    \ 'len': 6,
    \ 'options': ['ಠ_ಠ']
    \ }
<
for ime.vim to replace ".[,stare" to ".[ಠ_ಠ".

If the handler returns ['ಠ_ಠ'], ime.vim replaces ".[,stare" to "ಠ_ಠ".

------------------------------------------------------------------------------
3.2 Multiple submodes                                    *ime-plugin-submodes*

Some input methods have multiple submodes for different reasons:

- It's not easy to input punctuation marks in phonetic input method
  as it uses at least 36 keys
- It's not easy to input Hiragana and Katakana characters on the same keyboard
  as they pronounce the same
- Even English input method has Capslock that equals to capitalized mode

If your plugin has multiple submodes, the following information are necessary:
                                                         *ime-plugin-switch[]*
- "switch": |List|[|string|], what keys should switch to submode
                                                        *ime-plugin-submode()*
- "submode": |Funcref|, switch to correcponding submode
             according to the switch key

On the other side, ime.vim provides a interface to allow your plugin to change
the icon:

ime#icon({plugin-name}, {icon-str})                               *ime#icon()*

{plugin-name}   the plugin name. ime.vim only permitts the current plugin to
                change its icon. Please refer to |ime-plugin-name|
{icon-str}      the new icon string. This argument has no constrains, just make
                sure the user understand it.

Let's see a simplified example:
>
    let s:mode = 0

    function! ime_{plugin-name}#submode (switch)
        if a:switch == ''
            let s:mode = 0
            call ime#icon({plugin-name}, '[:)]')
        elseif a:switch == <key1>
            let s:mode = 1
            call ime#icon({plugin-name}, '[:D]')
        ...
        endif
    endfunction

    function! ime_{plugin-name}#info()
        return {
            \ ...
            \ 'switch': ['<key1>', '<key2>', ...]
            \ 'submode': function('ime_{plugin-name}#submode')
            \ ...
            \ }
    endfunction
<
First, |ime-plugin-submode()| is provided by |ime_{plugin-name}#info()|.
When the user select this mode, ime.vim executes |inoremap| according to
|ime-plugin-switch[]|.

If the user pressed any one of switch key, ime.vim calls |ime-plugin-submode()|
and pass the key as the argument.
The plugin can switch to correcponding submode according to this key.

If ime.vim passed an empty string to |ime-plugin-submode()|, it means that the
user selects another mode. The plugin can set itself to the default submode or
stay in the current submode.

Remember to call |ime#icon()| in |ime-plugin-submode()| to let ime.vim update
the plugin icon.

Note that is your plugin has only two submodes, you can omit
|ime-plugin-switch[]|, and ime.vim will use |g:ime_switch_submode| for it.

==============================================================================
4.  Choose a word                                     *ime-plugin-choose-word*

Many input methods has the "use hotkey to choose word" feature, so that uses
don't have to press arrow key many times to select the desired word.

This function is provided by ime.vim, and your plugin only need to provide
"choice" information:
>
    function! ime_{plugin-name}#info()
        return {
            \ ...
            \ 'choice': ['<key1>', '<key2>', ...]
            \ ...
            \ }
    endfunction
<
When the word-selection menu appears, ime.vim will add "choice" key into menu
one-by-one, and use |inoremap| to setup those keys.

After user press the corresponding key, the word will be treat as the only
option in the menu, and then all "choice" keys are |iunmap| ed.

Zero-length hotkeys will be skipped.

This feature would be disabled if ##CompleteDone is not supported.

It's recommanded that "trigger" and "choice" are not overlapped.

==============================================================================
5.  Log message                                                    *ime#log()*

    If debugging is the process of removing software bugs,
    then programming must be the process of putting them in.

                                                    -- Edsger Dijkstra

Instead of |echom| yourself, you can try ime#log({logtag}, {...}) instead.

{logtag} The log tag that prepends to the log message.
         This value has no constrains (must be |string| though),
         the value is up to developr.
{...}    The log message, could be any values (up to 20 values, see |...|)
         Every argument will be cast to |string| and separate with a
         space character.

The following code:
>
    call ime#log('MyTag', 'It''s not a bug, it''s feature.')
<
prints the following message:
>
    [ime][MyTag] It's not a bug, it's feature.
<
For convenience, you can wrap |ime#log()|:
>
    function! s:log (...)
        call call(function('ime#log'), ['my-tag'] + a:000)
    endfunction
<
So that you don't have to write {logtag} every time you call |ime#log()|.

==============================================================================
6.  Script-local function in Vim 7.3          *ime-plugin-for-vim-7.3-funcref*

According to this thread:

http://vim.1045645.n5.nabble.com/Funcref-and-script-local-functions-td1151686.html

Script-local functions (i.e. functions with prefix |s:|) cannot be used outside
the script.
In other words, the plugin handler should not be declared to script local.

But according my test:
>
    function("s:Handler")
<
could successfully be used as plugin handler in Vim 7.4 and above.

If you want to hide plugin handler in this way, remember to notify your user
that this plugin is not compatiable to Vim 7.3.
