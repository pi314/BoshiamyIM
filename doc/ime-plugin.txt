*ime-plugin*               For Vim version 8.0             Last update：2018/12

                                            ime.vim plugin development document
===============================================================================
Index

1.  Introduction..............................|ime-plugin-intro|
2.  Folder Structure..........................|ime-plugin-structure|
    2.1 Plugin with Huge Data.................|ime-plugin-with-huge-data|
3.  Handler - the Core of the Plugin..........|ime-plugin-handler-intro|
    3.1 Handler - Complicated Operations......|ime-plugin-complex-handler|
    3.2 Setting Menu..........................|ime-plugin-menu-intro|
4.  Choose a word.............................|ime-plugin-choose-word|
5.  API.......................................|ime-plugin-api|
    5.1 Log Message...........................|ime#log()|
    5.2 Plugin Information....................|ime-plugin-info()|
    5.2.1 Handler - the Core of the Plugin....|ime-plugin-handler()|
    5.2.2 Setting Menu........................|ime-plugin-menu()|
    5.3 Plugin Icon...........................|ime#icon()|
6.  Script-local Function in Vim 7.3..........|ime-plugin-for-vim-7.3-funcref|

===============================================================================
1.  Introduction                                             *ime-plugin-intro*

ime.vim is able to load third party plugins if they fit certain structure.

There are two kinds of ime.vim plugins:

1)  Standalone plugins work as input modes, they show up in the menu when you
    are choosing input mode. They have their own icons and descriptions.

2)  Embedded plugins are embedded in every input mode,
    prior to the input modes.
    They can be considered as extensions to the input modes.

A ime.vim plugin needs to provide necessary information:

- "type", the type of the plugin, can be either "standalone" or "embedded".
- "pattern", the string pattern that the plugin can process.
- "handler", the core logic of the plugin.
- "trigger", the keys that the plugin can process.

If your plugin is a standalone plugin, you need to provide more information.

- "icon", the plugin icon.
- "description", the description text.

The following information is optional, can be provided if your plugin supports:

- "choice", the keys that used to quick-selecting words.
- "menu", to provide setting menu, and adjusting plugin's behavior.

Before reading further, please refer to |ime-plugin-info()|.

===============================================================================
2.  Folder Structure                                     *ime-plugin-structure*

ime.vim plugins are suggested to place files in the following structure:
>
    {plugin-folder}/
    |-- autoload/
    |   `-- ime_{plugin-name}.vim
    `-- README
<
*ime_{plugin-name}.vim* is the main file of the plugin.

Suggested content is as following:
>
    function! ime_{plugin-name}#handler (matchobj, trigger)
        " plugin logic here
    endfunction

    function! ime_{plugin-name}#info()
        return {
            \ 'type': 'standalone',
            \ 'icon': '[eg]',
            \ 'description': 'An example',
            \ 'pattern': '.*$',
            \ 'handler': function('ime_{plugin-name}#handler'),
            \ 'trigger': ['<space>', '3', '4', '6', ...],
            \ }
    endfunction
<
Please adjust the content for your needs.
Note that the value of handler is function('ime_{plugin-name}#handler'),
     the quote marks are necessary.

Note that at least the file ime_{plugin-name}.vim and the function
     ime_{plugin-name}#info() should follow the naming rule, otherwise ime.vim
     will not load this plugin.

-------------------------------------------------------------------------------
2.1 Plugin with Huge Data                           *ime-plugin-with-huge-data*

If your plugin needs to load huge data, you can leverage Vim's |autoload|.

Add file *ime_{plugin-name}_table.vim* in {plugin-folder}/autoload:
>
    let s:table = {}
    let s:table['key_1'] = [...]
    let s:table['key_2'] = [...]
    ...
    let s:table['key_n'] = [...]

    function! ime_{plugin-name}_table#table ()
        return s:table
    endfunction
<

And adjust |ime_{plugin-name}.vim| to:
>
    let s:table = {}

    function! ime_{plugin-name}#handler (matchobj, trigger)
        if s:table == {}
            let s:table = ime_{plugin-name}_table#table()
        endif

        " plugin logic here
    endfunction

    function! ime_{plugin-name}#info()
        return {
            \ 'type': 'standalone',
            \ 'icon': '[eg]',
            \ 'description': 'An example',
            \ 'pattern': '.*$',
            \ 'handler': function('ime_{plugin-name}#handler'),
            \ 'trigger': ['<space>', '3', '4', '6', ...],
            \ }
    endfunction
<
===============================================================================
3.  Handler - the Core of the Plugin                 *ime-plugin-handler-intro*

The core function of the plugin is provided by the plugin handler.

When switching to a input method, ime.vim executes |inoremap| according to
"trigger" information provided by the plugin.
If user pressed one of the trigger key, ime.vim passes the cursor line text
and "pattern" to |matchlist()|.
If the matching succeed, the matching result (a |list|) and the trigger key
will be passed into handler together.

Handler processes the matching result and the trigger key,
and return a |list| containing availble options.
The ordering of the options could be decided by the handler.

The options then passed into |complete()| to generate completion menu,
every option could have their description text.
For further information see |complete-items|.

The handler can leverage regex groups (see |\1|) in the pattern.

Please refer to |ime-plugin-trigger[]|, |ime-plugin-pattern|,
and |ime-plugin-handler()|.

-------------------------------------------------------------------------------
3.1 Handler - complicated operations               *ime-plugin-complex-handler*

Some plugins need to do very complicated operations, for example 嘸蝦米 does
multi-stage match and give up part of strings every time.
This is very hard to achieve only with "pattern".

So, ime.vim allows handler to return a |dict| including two keys:

- "len": the text length that actually used
- "options": available options

For example, if ime.vim matchs string ".[,stare" with the pattern and passed
into the handler, but the handler decides only ",stare" can be used to
generate "ಠ_ಠ", the handler should return:
>
    {
    \ 'len': 6,
    \ 'options': ['ಠ_ಠ']
    \ }
<
for ime.vim to replace ".[,stare" to ".[ಠ_ಠ".

If the handler returns ['ಠ_ಠ'], ime.vim replaces ".[,stare" to "ಠ_ಠ".

Please refer to |ime-plugin-pattern| and |ime-plugin-handler()|.

-------------------------------------------------------------------------------
3.2 Setting menu                                        *ime-plugin-menu-intro*

For different reasons, some input modes provide setting menu for users to
adjust the behavior dynamically:

- It's not easy to input punctuation marks in phonetic input method
  as it uses at least 36 keys.
- It's not easy to input Hiragana and Katakana characters on the same keyboard
  as they pronounce the same.
- Even English input method has Capslock that equals to capitalized mode.

Let's see a simplified example:
>
    let s:mode = 0

    function! ime_{plugin-name}#menu (...)
        if a:0 == 0
            return [
                \ {'key': '1', 'menu': 'Happy'},
                \ {'key': '2', 'menu': 'More happy'},
            \ ]
        endif

        if a:1 == ''
            let s:mode = 0
            call ime#icon({plugin-name}, "['_']")
        elseif a:1 == '1'
            let s:mode = 1
            call ime#icon({plugin-name}, "['w']")
        elseif a:1 == '2'
            let s:mode = 2
            call ime#icon({plugin-name}, "[>w<]")
        endif
    endfunction

    function! ime_{plugin-name}#info()
        return {
            \ ...
            \ 'menu': function('ime_{plugin-name}#menu')
            \ ...
            \ }
    endfunction
<
First, "menu" information is provided.
In this example, the menu has two items:
>
    (1) Happy
    (2) More happy
<
After user pressed 1 or 2, the pressed key will be passed into ime.vim.
The plugin can switch to correcponding submode according to this key.

Remember to call |ime#icon()| in |ime-plugin-submode()| to let ime.vim update
the plugin icon.

Note that if your plugin has only one setting, you can directly adjust the
     behavior when a:0 == 0.

Please refer to |ime-plugin-menu()| and |ime-plugin-info()|.

===============================================================================
4.  Choose a word                                      *ime-plugin-choose-word*

Many input methods has the feature of using hotkey to choose word, so that
users don't have to press arrow key many times to select the desired word.

This function is now provided by ime.vim, and your plugin only need to provide
"choice" information:
>
    function! ime_{plugin-name}#info()
        return {
            \ ...
            \ 'choice': ['<key1>', '<key2>', ...]
            \ ...
            \ }
    endfunction
<
Please refer to |ime-plugin-choice[]|.

===============================================================================
5.  API                                                        *ime-plugin-api*

This chapter shows the API provided to the plugins, and the interface that
plugins should provide to ime.vim.

-------------------------------------------------------------------------------
5.1 Log message                                                     *ime#log()*

    If debugging is the process of removing software bugs,
    then programming must be the process of putting them in.

                                                    -- Edsger Dijkstra

Instead of |echom| yourself, you can try ime#log({logtag}, {...}) instead.

{logtag} The log tag that prepends to the log message.
         This value has no constrains (must be |string| though),
         the value is up to the devloper.
{...}    The log message, could be any values (up to 20 values, see |...|)
         Every argument will be casted into |string| and separated with a
         space character.

The following code:
>
    call ime#log('MyTag', 'It''s not a bug, it''s feature.')
<
prints the following message:
>
    [ime][MyTag] It's not a bug, it's feature.
<
For convenience, you can wrap |ime#log()|:
>
    function! s:log (...)
        call call(function('ime#log'), ['my-tag'] + a:000)
    endfunction
<
So that you don't have to write {logtag} every time you call |ime#log()|.

-------------------------------------------------------------------------------
5.2 Plugin Information                                      *ime-plugin-info()*

First, you need to give a name to your plugin                 *ime-plugin-name*
for users to add into |g:ime_plugins|.
The plugin name can only contain word character (see |\w|.)

The following shows information that recognized by ime.vim:

- "type" |string|
  The type of the plugin, can be either "standalone" or "embedded".
  See |ime-plugin-intro|.

- "pattern": |search-pattern|                              *ime-plugin-pattern*
  The string pattern that the plugin can process.
  ime.vim extracts the string before the cursor according to "pattern", and
  pass it to the plugin.

- "handler": |Funcref|
  The core logic of the plugin.
  Returns available options according to input string.
  See |ime-plugin-handler-intro| and |ime-plugin-handler()|.

- "icon": |string|
  The plugin icon
  Used in input mode selection menu and 'statusline'.
  Embedded plugins doesn't need to provide this information.

- "description": |string|
  The description text.
  Used in input modem selection menu
  Embedded plugins doesn't need to provide this information.

- "trigger": |list| [|string|]                           *ime-plugin-trigger[]*
  The keys that the plugin can process.
  When user switch to your plugin, all keys in "trigger" will be |inoremap|.
  When user switch to other plugin, those keys will be |iunmap|.

- "choice": |list| [|string|]                             *ime-plugin-choice[]*
  The keys that used to quick-selecting words.
  When user switch to your plugin, all keys in "choice" will be |inoremap|.
  After user press a "choice" key, those keys will be |iunmap|.
  Empty strings will be skipped.
  It is suggested that do not overlap "choice" with "trigger".
  This information will be ignore on Vim that doesn't support |CompleteDone|.
  See |ime-plugin-choose-word|.

- "menu": |Funcref|
  To provide setting menu, and adjusting plugin's behavior.
  If your plugin has no settings can be dynamically adjusted, this information
  can be skipped.
  See |ime-plugin-menu()|.

These information needs to be packed into a |dict| and returned
by ime_{plugin-name}#info():
>
    function ime_{plugin-name}#info()
        return {
            \ 'type': 'standalone',
            \ 'pattern': '.*',
            \ 'handler': function('ime_{plugin-name}#handler'),
            \ 'icon': '[Pi]',
            \ 'description': "Description",
            \ 'trigger': ['<space>', '3', '4', '6'],
            \ 'choice': ['<key1>', '<key2>', ...],
            \ 'menu': function('ime_{plugin-name}#menu'),
            \ }
    endfunction

-------------------------------------------------------------------------------
5.2.1 Handler - the Core of the Plugin                   *ime-plugin-handler()*

The plugin handler should have two parameters:
>
    function! ime_{plugin-name}#handler (matchobj, trigger)
<
a:matchobj is the matching result of text before cursor and "pattern" returned
by |matchlist()|.
a:trigger is the key that user pressed

The handler should return a |list| or a |dict|:

- If |list| [|string|] is returned, it includes available options.
- If |dict| is returned, two keys should be included:
  (see |ime-plugin-complex-handler|)

  - 'len': |expr-number|, represents the string length consumed by the options.
  - 'options': |list| [|string|], includes available options.

ime.vim won't sort the options.

-------------------------------------------------------------------------------
5.2.2 Setting Menu                                          *ime-plugin-menu()*

The plugin menu should have 0 or 1 parameters:
>
    function! ime_{plugin-name}#menu (...)
<
- If there are only 1 argument (a:0 == 1), |a:1| will be the key the user
  pressed. Your plugin can decide how to adjust behavior according to this key.

  - But if |a:1| is an empty string (''), it means user has switched to other
    plugin. Your plugin can choose to reset the state, or keep current state.

- If there are no arguments (a:0 == 0), it means ime.vim is requesting a menu
  to display.

  - The return value should be a |list|, with each item a |dict|.
  - Each item should include "key" and "menu", represents the hot key and
    description, respectively.
  - If your plugin doesn't want to display a menu, the return value can be none
    and directly adjust the behavior.

-------------------------------------------------------------------------------
5.3 Plugin Icon                                                    *ime#icon()*

ime#icon({plugin-name}, {icon-str})

{plugin-name}   The name of the plugin. ime.vim only allows the current
                activated plugin to change its own icon.
                See |ime-plugin-name|.
{icon-str}      New icon. this parameter have no limits, just make sure the
                user knows it's your plugin.

===============================================================================
6.  Script-local function in Vim 7.3           *ime-plugin-for-vim-7.3-funcref*

According to this thread:

http://vim.1045645.n5.nabble.com/Funcref-and-script-local-functions-td1151686.html

Script-local functions (i.e. functions with prefix |s:|) cannot be used outside
the script.
In other words, the plugin handler should not be declared to script local.

But according my test:
>
    function("s:Handler")
<
could successfully be used as plugin handler in Vim 7.4 and above.

If you want to hide plugin handler in this way, remember to notify your user
that this plugin is not compatiable to Vim 7.3.

===============================================================================
vim:tw=79:ts=8:noet:ft=help:norl:
