*ime.twx* *ime.vim*        For Vim version 8.0                最近更新：2018/12

                                                            一個 vim 輸入法引擎
===============================================================================
目錄

1.  介紹........................................|ime-introduction|
    1.2 輸入模式................................|ime-modes|
2.  設定與使用..................................|ime-settings-and-usage|
    2.1 在 'statusline' 顯示輸入模式............|ime#mode()|
    2.2 在英文與其他輸入模式之間切換............|g:ime_toggle_english|
    2.3 選擇主要輸入模式........................|g:ime_select_mode|
    2.4 選擇輸入模式的方式......................|g:ime_select_mode_style|
    2.5 交換主要/次要輸入模式...................|g:ime_switch_2nd|
    2.5.1 只顯示主要輸入模式....................|g:ime_show_2nd_mode|
    2.6 臨時取消輸入文字........................|g:ime_cancel_input|
    2.7 開啟輸入法設定選單......................|g:ime_menu|
    2.8 自訂字根表..............................|g:ime_boshiamy_custom_table|
    2.9 載入套件................................|g:ime_plugins|
    2.10 ime buffer.............................|g:ime_enable_ime_buffer|
    2.11 輸出嘸蝦米字根表.......................|ime-export-boshiamy-cin|
3.  內建套件....................................|ime-builtin-plugins|
    3.1 嘸蝦米模式..............................|ime-builtin-plugin-boshiamy|
    3.2 日文模式................................|ime-builtin-plugin-kana|
    3.3 注音模式................................|ime-builtin-plugin-chewing|
    3.4 Unicode 模式............................|ime-builtin-plugin-unicode|
4.  可以配合 vim 使用的技巧.....................|ime-tips|
5.  技術細節....................................|ime-implementation-details|

===============================================================================
1.  介紹                                                     *ime-introduction*

在 Vim 裡面輸入中文一直都是件麻煩事。

有在使用中文輸入法的人都會知道，每個中文輸入法都有兩種狀態：

- 英文
- 中文

Vim 也有兩種狀態：

- Insert mode (以及類似的狀態如 insert mode)
- 非 insert mode (例如 normal mode 和 command mode 等等)

這些狀態在使用時會疊在一起，如下表：
>
    +----------------+------+------+
    | Vim \ 輸入法   | 英文 | 中文 |
    +----------------+------+------+
    | Insert mode    | :)   | :)   |
    +----------------+------+------+
    | 非 insert mode | :)   | :(   |
    +----------------+------+------+
<
這四種狀況中，中文 x 非 insert mode 非常討厭，按下的按鍵是中文的字根，
會被輸入法攔截下來，不會直接進入 Vim。

如果能把這個狀況去除，就可以避免「需要不斷按下 |shift| 或是 |control| + |space|」
的狀況。而要達到這個目標，最好的方式就是在 Vim 中嵌入一個中文輸入法。

-------------------------------------------------------------------------------
1.2 輸入模式                                                        *ime-modes*

ime.vim 內建支援嘸蝦米輸入法、假名輸入以及注音輸入，
還可以載入第三方套件。
若有需要，內建的輸入法可以全部關閉。

在這些模式之間切換時，ime.vim 會同時維護三個狀態：
>
    是否在英文模式 ---.------.          主要輸入模式    次要輸入模式
                      |      |              |               |
                      v      v              |               |
                    .----.--------.         |               |
                    |    | 嘸蝦米 | <-------| <-------------|
                    |    |--------|         |               |
                    | 英 | 日文   | <-------| <-------------|
                    | 文 |--------|         |               |
                    |    | 套件 1 | <-------| <-------------|
                    |    |--------|         |               |
                    |    | 套件 2 | <-------' <-------------'
                    '----'--------'
<
若 ime.vim 處於英文模式，則輸入的字串會直接進入編輯區不做處理；
否則 ime.vim 會根據選擇的輸入模式將字串交給不同的引擎處理。

|g:ime_toggle_english| 能夠將英文模式開啟/關閉；
|g:ime_select_mode| 能夠選擇主要輸入模式；
|g:ime_switch_2nd| 能夠交換主要/次要輸入模式。

每個輸入模式可以自訂各自的送字按鍵，請參考它們的文件。
內建的嘸蝦米輸入模式以空白鍵送字。

===============================================================================
2.  設定與使用                                         *ime-settings-and-usage*

ime.vim 的目標之一是安裝以後不用設定即可使用，
所以使用者會接觸到的大部份設定都以變數而不是函式的方式提供。

-------------------------------------------------------------------------------
2.1 在 'statusline' 顯示輸入模式                                   *ime#mode()*

|ime#mode()| 回傳輸入法目前的狀態，你可以在 'statusline' 顯示這個資訊：
>
    set statusline=%<%{ime#mode()}%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P
<
這行 'statusline' 看起來會像
>
    [嘸]README.rst [+]     75,67-59 53%
<
Note: 在 Vim 7.4.1711 之前，直接把它放在 'statusline' 裡面可能會導致
      'statusline' 被重設，包裝一層函式可以暫時解決這個問題：
>
      function! IMEStatusString ()
          if exists('*ime#mode')
              return ime#mode()
          endif
          return ''
      endfunction
      set statusline=%{IMEStatusString()}
<
-------------------------------------------------------------------------------
2.2 在英文與其他輸入模式之間切換                         *g:ime_toggle_english*
>
    let g:ime_toggle_english = ',,'
<
這個設定會被 |inoremap| 使用，請注意別設成自己常用的按鍵串或是輸入法的字根。

在切換成英文模式時，先前選擇的模式會被保留。

-------------------------------------------------------------------------------
2.3 選擇輸入模式                                            *g:ime_select_mode*
>
    let g:ime_select_mode = ',m'
<
這個設定會被 |inoremap| 使用，請注意別設成自己常用的按鍵串或是輸入法的字根。

-------------------------------------------------------------------------------
2.4 選擇輸入模式的方式                                *g:ime_select_mode_style*
>
    let g:ime_select_mode_style = 'popup'
<
若不設定或是設定成 "popup"，選擇模式時會以補完選單呈現。
若設定成 "interactive"，選擇模式時會以互動式選單呈現。

在 |CompleteDone| 或是 |v:completed_item| 無法使用時，此選項會被無視，
直接視為 "interactive"。

-------------------------------------------------------------------------------
2.5  交換主要/次要輸入模式                                   *g:ime_switch_2nd*
>
    let g:ime_switch_2nd = ',.'
<
將主要/次要輸入模式互相交換。

-------------------------------------------------------------------------------
2.5.1 只顯示主要輸入模式                                  *g:ime_show_2nd_mode*
>
    let g:ime_show_2nd_mode = 0
<
ime.vim 預設會將主要/次要輸入模式的 icon 都顯示出來。

若希望 |ime#mode()| 只顯示主要輸入模式，可將這項設定設為 false。

-------------------------------------------------------------------------------
2.6 臨時取消輸入文字                                       *g:ime_cancel_input*
>
    let g:ime_cancel_input = '<C-h>'
<
在開啟嘸蝦米模式時，若輸入不正確的字根，ime.vim 會直接輸出一個空白字元，
這是為了讓使用者方便在輸入中文時嵌入英文單字，而不用來回切換模式。

但有些常用的英文單字如「id」、「user」、「are」 等等，剛好對應到嘸蝦米的字根，
使得這些單字變成中文。事實上，所有長度為二的英文單字都已被嘸蝦米使用。

若使用者輸入了這樣的字根，可以在選單尚未消失時使用取消輸入功能，
讓中文字變回字根。

其他輸入模式亦同。

-------------------------------------------------------------------------------
2.7 開啟輸入法設定選單                                             *g:ime_menu*
>
    let g:ime_menu = ';;'
<
有些輸入模式會提供設定選單，讓使用者隨時調整輸入法的行為。

如果可以調的功能只有一種，按下 |g:ime_menu| 以後，
設定選單可能不會出現，而是設定直接生效。

不一定每個模式都有設定選單，請參考它們的說明文件。

-------------------------------------------------------------------------------
2.8 自訂字根表                                    *g:ime_boshiamy_custom_table*
>
    let g:ime_boshiamy_custom_table = '~/.boshiamy.table'
<
使用者可以自訂字根表，這個字根表的優先度比內建的表格高，
可以用來新增甚至修改組字規則，也可以加入表情符號。

自訂字根表格式為「字串 字根 字根 ...」，中間以空白字元分隔，例如：
>
      (((°Д°;))  ,face
      (ಥ_ಥ)      ,face
      ಠ_ಠ        ,face ,stare
      ఠ_ఠ        ,face ,stare
      (ゝω・)    ,face
      (〃∀〃)    ,face
      (¦3[▓▓]    ,face ,sleep
      (눈‸눈)    ,face
      ㅍ_ㅍ      ,face
<
這個字根表的先後順序會被保留，和選字選單的順序相同。

此全城變數 沒有 預設值，請在需要使用時再設定。

-------------------------------------------------------------------------------
2.9 載入套件                                                    *g:ime_plugins*

ime.vim 能夠載入符合格式的第三方套件，若你有安裝套件，
請在你的 |vimrc| 裡將它們列出。例如：
>
    let g:ime_plugins = ['wide', 'runes', 'braille', 'emoji']
<
有一點需要注意，如果你設定了這個值，內建的套件將會全部被關閉。
如果你希望內建的套件也開啟，請手動將它們列出：
>
    let g:ime_plugins = [
        \ 'builtin_boshiamy',
        \ 'builtin_kana',
        \ 'builtin_chewing',
        \ 'builtin_unicode',
        \ 'wide', 'runes', 'braille', 'emoji']
<
你可以依照喜好決定套件的順序。

-------------------------------------------------------------------------------
2.10 ime buffer                                       *g:ime_enable_ime_buffer*

ime.vim 的優點之一是更新方便，若你在 ime.vim 裡面有新增特殊的符號，但系統輸入
法無法輸入該符號，可以透過 ime buffer 輔助輸入它。

ime buffer 試圖模仿一般的輸入框，在按下 Enter 以後，將一行字剪下並複製到系統的
剪貼簿，之後你就可以在需要的地方貼上。

這個功能預設是關閉的，若要啟用它：
>
    let g:ime_enable_ime_buffer = 1
<
為了不影響平常的使用，你必須指定一個 buffer 為 ime buffer：
>
    :set ft=ime
<
-------------------------------------------------------------------------------
2.11 輸出嘸蝦米字根表                                 *ime-export-boshiamy-cin*

ime.vim 提供以下指令輸出嘸蝦米字根表：
>
    :IMEExportBoshiamyCIN
<
輸出的結果會包含日文字根以及自訂字根表的內容（|g:ime_boshiamy_custom_table|）。

===============================================================================
3.  內建套件                                              *ime-builtin-plugins*

ime.vim 的套件分成兩種

1)  Standalone 套件自成一個輸入模式，在選擇模式時會顯示在選單中，
    有自己的圖示和說明。

2)  Embedded 套件內嵌在各個輸入法中，優先於輸入法本身，
    相當於對輸入法字根表的擴充。

以下介紹已經內建在 ime.vim 之中的套件。

-------------------------------------------------------------------------------
3.1 嘸蝦米模式                                    *ime-builtin-plugin-boshiamy*

嘸蝦米模式為 standalone 套件，是 ime.vim 最初的開發動機。
圖示為 [嘸]，套件名稱為「builtin_boshiamy」。

和大部份的系統輸入法不同，嘸蝦米模式會先取整段字串嘗試送字，
若沒有結果，最開頭的一部份字串會被放棄，然後再次嘗試，
直到所有字元都被放棄，或是有結果產生為止。

範例：

- 「wmbr」會輸出「測」

- 「wmbr,id」會輸出「wmbr,誤」
    1.  比對「wmbr,id」，無法輸出字根，於是「wmbr」被放棄
    2.  比對「,id」，無法輸出字根，於是「,」被放棄
    3.  比對「id」，得到「誤」

嘸蝦米模式內建有「積極模式」，可透過選單開啟。（參考 |g:ime_menu|）
積極模式會把大寫字母、數字以及底線都去除，以儘可能送字。

範例：

- Apl -> A卷
- 10ol -> 10號

-------------------------------------------------------------------------------
3.2 日文模式                                          *ime-builtin-plugin-kana*

日文模式為 standalone 套件，能夠輸入日文平假名及片假名，但無法輸入漢字。
圖示為 [あ] 以及 [ア]，套件名稱為「builtin_kana」。

- 使用羅馬拼音輸入
- 按下「;;」可在平假名與片假名之間切換
- 按下「v」可把前一個假名改為促音
- 範例：

  - a -> あ
  - あv -> ぁ
  - buiaiemu -> ぶいあいえむ

-------------------------------------------------------------------------------
3.3 注音模式                                       *ime-builtin-plugin-chewing*

注音模式為 embedded 套件，能夠以注音輸入中文字，
套件名稱為「builtin_chewing」。

注音的字根開頭一律為「;」，並接上注音字根；
輸入「;hk4」以後可以產生「測」的同音字選單。

所有的注音符號都在選單的第一位；「;;」會優先補完「ㄤ」。

-------------------------------------------------------------------------------
3.4 Unicode 模式                                   *ime-builtin-plugin-unicode*

Unicode 模式為 embedded 套件，能夠以 unicode 碼位（code point）輸入字元，
也能查詢字元的碼位。
套件名稱為「builtin_unicode」。

範例：

- \u5B57 -> 字
- \u[字] -> \u5b57

===============================================================================
4.  可以配合 vim 使用的技巧                                          *ime-tips*

在取代模式中，一個字元只會覆蓋一個字元，無論寬度。

在繪製 ASCII 圖片時，如果用中文字去覆蓋空白字元，會讓那行變得越來越長，
因為一個兩格寬的中文字卻只覆蓋了一個空白字元。

此時 vim 內建的 |gR| 變得很有用，它可以根據字元的寬度覆蓋字元。

===============================================================================
5.  技術細節                                       *ime-implementation-details*

ime.vim 透過 |inoremap| 觸發送字，
但切換到英文模式時這些 |inoremap| 會被 |iunmap|，
所以在英文模式下連續輸入按鍵的效率會比較高。

ime.vim 第三方套件的開發請參考 |ime-plugin|。

vim:tw=79:ts=8:noet:ft=help:norl:
