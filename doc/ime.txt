*ime.txt* *ime.vim*       For Vim version 8.0             Last update：2017/04

                                                     A Vim input method engine
==============================================================================
Index

1.  Introduction................................|ime-introduction|
    1.2 Input modes.............................|ime-modes|
2.  Settings....................................|ime-settings|
    2.1 Show input mode in 'statusline'.........|ime#mode()|
    2.2 Toggle English..........................|g:ime_toggle_english|
    2.3 Select mandatory input mode.............|g:ime_select_mode|
    2.4 Different mode select styles............|g:ime_select_mode_style|
    2.5 Switch mandatory/secondary input mode...|g:ime_switch_2nd|
    2.5.1 Only show mandatory input mode........|g:ime_show_2nd_mode|
    2.6 Cancel input text.......................|g:ime_cancel_input|
    2.7 Switch to submode.......................|g:ime_switch_submode|
    2.8 Custom table............................|g:ime_boshiamy_custom_table|
    2.9 Load plugins............................|g:ime_plugins|
    2.10 ime buffer.............................|g:ime_enable_ime_buffer|
3.  Built-in plugins............................|ime-built-in-plugins|
    3.1 Boshiamy mode...........................|ime-built-in-plugin-ime|
    3.2 Kana mode...............................|ime-built-in-plugin-kana|
    3.3 Phonetic mode...........................|ime-built-in-plugin-chewing|
    3.4 Unicode mode............................|ime-built-in-plugin-unicode|
4.  Tips that can be used with Vim..............|ime-tips|
5.  Implementation details......................|ime-implementation-details|

==============================================================================
1.  Introduction                                            *ime-introduction*

It's always a trouble to input Chinese characters in Vim.

Everyone who uses Chinese Input Method knows that they have two states:

- English mode
- Chinese mode

Vim has two states, too:

- Insert mode (and similar modes)
- Non-insert mode (like normal mode or command mode)

So we have four combinations:
>
    +--------------------+---------+---------+
    | Vim \ Input method | English | Chinese |
    +--------------------+---------+---------+
    | Insert mode        | :)      | :)      |
    +--------------------+---------+---------+
    | Non-insert mode    | :)      | :(      |
    +--------------------+---------+---------+
<
The "Chinese / Non-insert mode" is very troublesome,
your keyboard input will be intercepted
by the input method and will not go into Vim.

If we can get rid of this situation, we can avoid keep hitting
|shift| or "|control| + |space|" to close input method.
And the best way to do this is to embedded an input method in Vim.

------------------------------------------------------------------------------
1.2 Input modes                                                    *ime-modes*

ime.vim has built-in boshiamy, kana, and chewing (phonetic) input methods,
it can even load third-party plugins.
All built-in input methods can be disabled when necessary.

When the user switch between these modes, ime.vim maintains three states:
>
    English enabled --.-----------.            Mandatory    Secondary
                      |           |            input mode   input mode
                      v           v                |            |
                    .---------.----------.         |            |
                    |         | Boshiamy | <-------| <----------|
                    |         |----------|         |            |
                    | English | Kana     | <-------| <----------|
                    |         |----------|         |            |
                    |         | Plugin 1 | <-------| <----------|
                    |         |----------|         |            |
                    |         | Plugin 2 | <-------' <----------'
                    '---------'----------'
<
If ime.vim is in English mode,
the user's input will directly goes into buffer without being processed.
Otherwise, ime.vim invokes different correcponding mode to process the string.

|g:ime_toggle_english| enables/disables English mode;
|g:ime_select_mode| selectes input mode.
|g:ime_switch_2nd| switches mandatory and secondary input modes.

Every input method has their own key-sending settings,
please refer to their documents.
The built-in Boshiamy and kana mode are triggered by <space>.

==============================================================================
2.  Settings                                                    *ime-settings*

One of the goals of ime.vim is plug-and-play,
so most settings is provided in variable form instead of functions.

------------------------------------------------------------------------------
2.1 Show input mode in 'statusline'                               *ime#mode()*

|ime#mode()| returns the current status,
you can show this information in 'statusline':
>
    set statusline=%<%{ime#mode()}%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P
<
This 'statusline' looks like:
>
    [嘸]README.rst [+]     75,67-59 53%
<
Note: Before Vim 7.4.1711, directly put it into 'statusline' may cause
      'statusline' being reset. Wrap it with another function solves
      this problem:
>
    function! IMEStatusString ()
        if exists('*ime#mode')
            return ime#mode()
        endif
        return ''
    endfunction
    set statusline=%{IMEStatusString()}
<
------------------------------------------------------------------------------
2.2 Toggle English                                      *g:ime_toggle_english*
>
    let g:ime_toggle_english = ',,'
<
This setting is used with |inoremap|, be careful not to override your mappings
or set it to key sequences that generates a character.

The previous mode will be kept after switch to English mode.

------------------------------------------------------------------------------
2.3 Select input mode                                      *g:ime_select_mode*
>
    let g:ime_select_mode = ',m'
<
This setting is used with |inoremap|, be careful not to override your mappings
or set it to key sequences that generates a character.

------------------------------------------------------------------------------
2.4 Different mode select styles                     *g:ime_select_mode_style*
>
    let g:ime_select_mode_style = 'popup'
<
If this option is not set or set to "popup", the mode selection menu will be
shown as a completion menu.
If this option is set to "interactive", the mode selection menu will be
shown in an interactive way.

This option is disabled and treat as "interactive" when
|CompleteDone| event or |v:completed_item| variable is not available.

------------------------------------------------------------------------------
2.5 Switch mandatory/secondary input mode                   *g:ime_switch_2nd*
>
    let g:ime_switch_2nd = ',.'
<
Switch mandatory and secondary input modes.

------------------------------------------------------------------------------
2.5.1 Only show mandatory input mode                     *g:ime_show_2nd_mode*
>
    let g:ime_show_2nd_mode = 0
<
By default, ime.vim show the icons of both mandatory and secondary input modes.

By setting this option to false, |ime#mode()| shows mandatory input mode only.

------------------------------------------------------------------------------
2.6 Cancel input text                                     *g:ime_cancel_input*
>
    let g:ime_cancel_input = '<C-h>'
<
In Boshiamy mode, when user input a sequence that cannot generate a character,
ime.vim will directly insert a space character.
This design is to allow user to embed English words between within Chinese
sentences.

But some words, for example "id", "user" and "are, can generate
Chinese character by Boshiamy.
In fact, all 2-alphabet words are occupied by Boshiamy.

If you typed this kind of texts, you can use this "cancel input" feature
to turn the character back to word again (before completion menu disappear).

Same rules apply to other input modes.

------------------------------------------------------------------------------
2.7 Switch to submode                                   *g:ime_switch_submode*
>
    let g:ime_switch_submode = ';;'
<
Some input mode has several submodes, like Microsoft phonetic input method,
after pressing ``ctrl`` + ``alt`` + ``,``, a screen keyboard pops up,
and the next key will output a punctuation mark instead of phonetic symbol.

Not every input mode has submodes, and their switch keys would not be the same,
please refer to their documents.

------------------------------------------------------------------------------
2.8 Custom table                                 *g:ime_boshiamy_custom_table*
>
    let g:ime_boshiamy_custom_table = '~/.boshiamy.table'
<
This options can be used to customize 嘸蝦米 table.
Add characters, words, or even emoji to this table.

The format in the file is "string root root ...", separated by a space
character. For example:
>
      (((°Д°;))  ,face
      (ಥ_ಥ)      ,face
      ಠ_ಠ        ,face ,stare
      ఠ_ఠ        ,face ,stare
      (ゝω・)    ,face
      (〃∀〃)    ,face
      (¦3[▓▓]    ,face ,sleep
      (눈‸눈)    ,face
      ㅍ_ㅍ      ,face
<
The order in this table will be kept.

This option has NO default value.

------------------------------------------------------------------------------
2.9 Load plugins                                               *g:ime_plugins*

ime.vim is able to load third party plugins if they fit certain structure.
If you had installed some, please list them in your |vimrc|:
>
    let g:ime_plugins = ['wide', 'runes', 'braille', 'emoji']
<
Note that if you set this value, the built-in plugins will all being disabled.
If you want to enable built-in plugins, please list them manually:
>
    let g:ime_plugins = [
        \ 'builtin-boshiamy',
        \ 'builtin-kana',
        \ 'builtin-chewing',
        \ 'builtin-unicode',
        \ 'wide', 'runes', 'braille', 'emoji']
<
You can decide the order of these plugins.

------------------------------------------------------------------------------
2.10 ime buffer                                      *g:ime_enable_ime_buffer*

If you add some special symbol in ime.vim, but you are not able to input it
with system input methods, you can leverage the ime buffer.

ime buffer try to mimic normal input box. When Enter is pressed, one line of
text is cut and copied into system clipboard, and you can paste it to the place
you want.

This feature is disabled by default, to enabled it:
>
    let g:ime_enable_ime_buffer = 1
<
And you have to explicitly activate it:
>
    :set ft=ime
<

==============================================================================
3.  Built-in plugins                                    *ime-built-in-plugins*

There are two kinds ot ime.vim plugins:

1)  Standalone plugins work as input modes, they show up in the menu when you
    are choosing input mode. They have their own icons and descriptions.

2)  Embedded plugins are embedded in every input mode,
    prior to the input modes.
    They can be considered as extensions to the input modes.

This section introduces the built-in plugins in ime.vim.

------------------------------------------------------------------------------
3.1 Boshiamy mode                               *ime-built-in-plugin-boshiamy*

Boshiamy mode is a standalone plugin, which is the original idea of this project.
Its icon is [嘸], plugin name is "builtin-boshiamy".

Different from most system input methods, Boshiamy mode first takes the whole
string and try to generate characters, if no result, part of the string will
be cut out, and the remaining string is used to try again.
This process repeats until the whole string is gave up
or the result is generated.

Example:

- "wmbr" generates "測"

- "wmbr,id" generates "wmbr,誤"
    1.  Check "wmbr,id", no result, "wmbr" is cut out
    2.  Check ",id", no result, "," is cut out
    3.  Check "id", generates "誤"

------------------------------------------------------------------------------
3.2 Kana mode                                       *ime-built-in-plugin-kana*

Kana mode is a standalone plugin, which can be used to input
Japanese Hiragana and Katakana, but it is unable to output Kanji.
Its icon is [あ] and [ア], plugin name is "builtin-kana"。

- Input in romanisation
- Type ";;" to switch between Hiragana and Katakana
- Type "v" to change previous symbol to sokuon
- Examples:

  - "a" -> "あ"
  - "あv" -> "ぁ"
  - "buiaiemu" -> "ぶいあいえむ"

------------------------------------------------------------------------------
3.3 Phonetic mode                               *ime-built-in-plugin-chewing*

Phonetic mode is an embedded plugin, can be used to input Chinese characters.
Its plugin name is "builtin-chewing"。

";" has to preceed any phonetic strings;
";hk4" generates a menu containing all characters with same sound to "測".

All phonetic symbol will be in the first place;
";;" generates "ㄤ" in highest priority.

------------------------------------------------------------------------------
3.4 Unicode mode                                 *ime-built-in-plugin-unicode*

Unicode mode is an embedded plugin,
which can input characters with unicode code point and also
query the unicode code point of any characters. (the later feature is like |ga|)
Its plugin name is "builtin-unicode"。

Examples:

- "\u5B57" -> "字"
- "\u[字]" -> "\u5b57"

==============================================================================
4.  Tips that can be used with Vim                                  *ime-tips*

In replace mode, one character override one character,
no matter the width.

When drawing ASCII graphs, if you use Chinese characters to replace
space characters, the line under cursor will be longer and longer,
because a two-width Chinese character only replaces one space character.

The vim built-in |gR| is very useful in this case.

==============================================================================
5.  Implementation details                        *ime-implementation-details*

ime.vim triggers the input modes by |inoremap|,
and |iunmap| them after switching to English mode.
So type in English mode is more effective.

Further information about developing third party plugins for ime.vim:
|ime-plugin|
