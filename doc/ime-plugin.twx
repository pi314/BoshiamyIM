*ime-plugin*                For Vim version 8.0               最近更新：2018/12

                                                           ime.vim 套件開發文件
===============================================================================
目錄

1.  介紹......................................|ime-plugin-intro|
2.  目錄結構..................................|ime-plugin-structure|
    2.1 需要載入龐大資料的套件................|ime-plugin-with-huge-data|
3.  套件核心 - handler........................|ime-plugin-handler-intro|
    3.1 Handler - 複雜的判斷..................|ime-plugin-complex-handler|
    3.2 設定選單..............................|ime-plugin-menu-intro|
4.  選字......................................|ime-plugin-choose-word|
5.  API.......................................|ime-plugin-api|
    5.1 Log 訊息..............................|ime#log()|
    5.2 套件資訊..............................|ime-plugin-info()|
    5.2.1 套件核心 - handler..................|ime-plugin-handler()|
    5.2.2 設定選單 - menu.....................|ime-plugin-menu()|
    5.3 輸入法圖示............................|ime#icon()|
6.  Vim 7.3 的 script-local function 問題.....|ime-plugin-for-vim-7.3-funcref|

===============================================================================
1.  介紹                                                     *ime-plugin-intro*

ime.vim 能夠載入第三方的套件，擴充自己的輸入能力。

1)  Standalone 套件自成一個輸入模式，
    在選擇模式時會顯示在選單中，有自己的圖示和說明。

2)  Embedded 套件內嵌在各個輸入模式中，優先於各個輸入模式，
    相當於對輸入法字根表的擴充。

一個 ime.vim 套件需要提供以下資訊：

- "type"，套件種類，只能是 "standalone" 或是 "embedded"。
- "pattern"，表示該套件所能處理的字串。
- "handler"，套件的核心。
- "trigger"，列出能夠觸發該輸入模式的按鍵。

若你的套件是 Standalone 套件，需要再提供以下資訊：

- "icon"，套件的圖示。
- "description"，說明文字。

以下資訊則是依照套件的設計，可以不提供：

- "choice"，選字用的按鍵。
- "menu"，用來提供設定選單，或是調整套件的行為。

請參考 |ime-plugin-info()|。

===============================================================================
2.  目錄結構                                             *ime-plugin-structure*

ime.vim 的套件建議依照以下的目錄結構放置檔案：
>
    {plugin-folder}/
    |-- autoload/
    |   `-- ime_{plugin-name}.vim
    `-- README
<
ime_{plugin-name}.vim 為套件的主要檔案，建議的內容為：
>
    function! ime_{plugin-name}#handler (matchobj, trigger)
        " plugin logic here
    endfunction

    function! ime_{plugin-name}#info()
        return {
            \ 'type': 'standalone',
            \ 'icon': '[eg]',
            \ 'description': 'An example',
            \ 'pattern': '.*$',
            \ 'handler': function('ime_{plugin-name}#handler'),
            \ 'trigger': ['<space>', '3', '4', '6', ...],
            \ }
    endfunction
<
請依照自己的需求對以上的內容做調整。注意 "handler" 的值為
function('ime_{plugin-name}#handler')，引號不可省略。

請注意至少 ime_{plugin-name}.vim 的檔名以及 ime_{plugin-name}#info() 函式
需要按照規則命名，否則 ime.vim 無法載入套件。

-------------------------------------------------------------------------------
2.1 需要載入龐大資料的套件                          *ime-plugin-with-huge-data*

若套件需要載入龐大的資料，可以利用 vim 的 |autoload| 功能。

在 {plugin-folder}/autoload/ 目錄裡增加一個 ime_{plugin-name}_table.vim 檔案：
>
    let s:table = {}
    let s:table['key_1'] = [...]
    let s:table['key_2'] = [...]
    ...
    let s:table['key_n'] = [...]

    function! ime_{plugin-name}_table#table ()
        return s:table
    endfunction
<

ime_{plugin-name}.vim 檔案調整為：
>
    let s:table = {}

    function! ime_{plugin-name}#handler (matchobj, trigger)
        if s:table == {}
            let s:table = ime_{plugin-name}_table#table()
        endif

        " plugin logic here
    endfunction

    function! ime_{plugin-name}#info()
        return {
            \ 'type': 'standalone',
            \ 'icon': '[eg]',
            \ 'description': 'An example',
            \ 'pattern': '.*$',
            \ 'handler': function('ime_{plugin-name}#handler'),
            \ 'trigger': ['<space>', '3', '4', '6', ...],
            \ }
    endfunction
<
===============================================================================
3.  套件核心 - handler                               *ime-plugin-handler-intro*

套件的核心功能由 handler 提供。

在切換到輸入法的時候，ime.vim 會根據套件提供的 "trigger" 執行 |inoremap|。
使用者若按下了其中一個 trigger 按鍵， ime.vim 會將編輯區該行的文字
與 "pattern" 傳入 |matchlist()| 進行比對。
若比對成功，該結果（一個 |list|）和 trigger 按鍵會一起被傳入 handler。

handler 需要針對傳入的 matchobj 以及 trigger 按鍵進行處理及判斷，
並回傳一個 |list|，包含可用的選項。回傳選項的順序可以由套件自行決定。

輸入時產生的選單透過 |complete()| 產生，每個選項可以帶有說明文字，詳細資訊請見
|complete-items|。

pattern 可以包含 regex groups（請參考 |\1|），提供 handler 判斷使用。

詳見 |ime-plugin-trigger[]|、|ime-plugin-pattern|、|ime-plugin-handler()|。

-------------------------------------------------------------------------------
3.1 Handler - 複雜的判斷                           *ime-plugin-complex-handler*

有些套件需要做很複雜的判斷，例如嘸蝦米模式會做多階段的比對，每次放棄一部份的
字串，這樣複雜程度只靠 pattern 處理是非常困難的。

因此，ime.vim 允許 handler 回傳 |dict|，包含兩項資訊：

- "len": 實際上比對到的長度
- "options": 比對到可用的選項

例如 ime.vim 根據 pattern 比對到 ".[,stare" 並傳入 handler，
但 handler 決定只有 ",stare" 能被比對為 "ಠ_ಠ"，此時應回傳
>
    {
    \ 'len': 6,
    \ 'options': ['ಠ_ಠ']
    \ }
<
使 ime.vim 把 ".[,stare" 取代為 ".[ಠ_ಠ"。

若直接回傳 ['ಠ_ಠ']，ime.vim 會把 ".[,stare" 取代為 "ಠ_ಠ"。

詳見 |ime-plugin-pattern|、|ime-plugin-handler()|。

-------------------------------------------------------------------------------
3.2 設定選單                                            *ime-plugin-menu-intro*

基於某些不同的原因，有些輸入模式會提供設定選單，讓使用者隨時調整輸入法的行為：

- 例如注音輸入法使用了至少 36 個按鍵，此時標點符號變得不容易輸入。
- 例如假名輸入法，在同一個鍵盤上輸入平假名和片假名是不容易的事情。
- 即使是英文輸入法也有 Capslock，相當於大寫模式。

如果你想要為你的套件實作選單，你需要提供 |ime-plugin-menu()|，
根據傳入的參數提供選單，或是調整行為。

先看一個簡略的範例：
>
    let s:mode = 0

    function! ime_{plugin-name}#menu (...)
        if a:0 == 0
            return [
                \ {'key': '1', 'menu': 'Happy'},
                \ {'key': '2', 'menu': 'More happy'},
            \ ]
        endif

        if a:1 == ''
            let s:mode = 0
            call ime#icon({plugin-name}, "['_']")
        elseif a:1 == '1'
            let s:mode = 1
            call ime#icon({plugin-name}, "['w']")
        elseif a:1 == '2'
            let s:mode = 2
            call ime#icon({plugin-name}, "[>w<]")
        endif
    endfunction

    function! ime_{plugin-name}#info()
        return {
            \ ...
            \ 'menu': function('ime_{plugin-name}#menu')
            \ ...
            \ }
    endfunction
<
首先，menu 資訊需要在 info 中提供。
這個範例的 menu 有兩項：
>
    (1) Happy
    (2) More happy
<
若使用者在選單中按下了 1 或 2，ime.vim 並將該按鍵當成參數傳入。
套件可以根據這個按鍵決定要切換至哪一個子模式。

在切換到子模式以後，請記得呼叫 |ime#icon()|，讓 ime.vim 更新套件的圖示。

有一點值得注意，如果你的套件只有一個設定可以調，
你可以直接在 a:0 == 0 時直接調整套件的行為。

詳見 |ime-plugin-menu()|、|ime-plugin-info()|。

===============================================================================
4.  選字                                               *ime-plugin-choose-word*

許多輸入法都有「快速鍵選字」的功能，使用者不需要一直按方向鍵來選擇想要的字。

這個功能現在由 ime.vim 提供，plugin 只需要提供 "choice" 資訊：
>
    function! ime_{plugin-name}#info()
        return {
            \ ...
            \ 'choice': ['<key1>', '<key2>', ...]
            \ ...
            \ }
    endfunction
<
詳見 |ime-plugin-choice[]|。

===============================================================================
5.  API                                                        *ime-plugin-api*

這個章節列出 ime.vim 提供給套件的 API，以及套件需提供給 ime.vim 的介面。

-------------------------------------------------------------------------------
5.1 Log 訊息                                                        *ime#log()*

ime#log({logtag}, {...})

{logtag} log 訊息的標籤，會附在訊息的最前方。
         這個參數沒有強制性，只要開發者方便識別即可。
{...}    log 訊息，可傳入任意參數（實際上限為 20 個，請參考 |...|）
         每個參數會被轉型為 |string| 以後，以空白字元分隔。

以下呼叫：
>
    call ime#log('我的標籤', '這不是 bug，是 feature。')
<
會產生以下訊息：
>
    [ime][我的標籤] 這不是 bug，是 feature。
<
為了使用方便，你可以自行將 |ime#log()| 包裝：
>
    function! s:log (...)
        call call(function('ime#log'), ['my-tag'] + a:000)
    endfunction
<
這樣就不需要在每次呼叫 |ime#log()| 時都要寫一次 {logtag}。

-------------------------------------------------------------------------------
5.2 套件資訊                                                *ime-plugin-info()*

首先，套件需要訂定一個名稱：plugin-name                       *ime-plugin-name*
讓使用者加在 |g:ime_plugins| 之中。
套件名稱只能包含大小寫英文字母以及底線。

以下套件名稱以 {plugin-name} 表示。

以下為 ime.vim 能處理的資訊：

- "type" |string|
  套件的種類，只能是 "standalone" 或是 "embedded"。
  詳見 |ime-plugin-introduction|。

- "pattern": |search-pattern|                              *ime-plugin-pattern*
  表示該套件所能處理的字串。
  ime.vim 會從游標處根據 pattern 往前找字串，給套件處理

- "handler": |Funcref|
  套件的核心。
  根據比對到的字串回傳可用的選項。
  詳見 |ime-plugin-handler-intro| 以及 |ime-plugin-handler()|。

- "icon": |string|
  輸入法的圖示。
  在選擇輸入模式時顯示，以及在 'statusline' 中顯示。
  Embedded 套件不需提供此資訊。

- "description": |string|
  說明文字。
  在選擇輸入模式時顯示。
  Embedded 套件不需提供此資訊。

- "trigger": |list| [|string|]                           *ime-plugin-trigger[]*
  列出能夠觸發該輸入模式的按鍵。
  在使用者切換到套件時，"trigger" 裡列出的按鍵會全部被 |inoremap| 設定。
  當使用者切換到其他套件時，這些 mapping 會全部被 |iunmap| 清除。

- "choice": |list| [|string|]                             *ime-plugin-choice[]*
  選字用的按鍵。
  在使用者切換到套件時，"choice" 裡列出的按鍵會全部被 |inoremap| 設定。
  使用者按下對應的按鍵後，這些 mapping 會全部被 |iunmap| 清除。
  空字串的快捷鍵會被跳過。
  建議 "choice" 資訊和 "trigger" 不要重疊。
  這個資訊在不支援 |CompleteDone| 的 Vim 上會被 ime.vim 忽略。
  詳見 |ime-plugin-choose-word|。

- "menu": |Funcref|
  用來提供設定選單，或是調整套件的行為。
  若套件沒有任何設定可以動態調整，則不需提供此資訊。
  詳見 |ime-plugin-menu()|。

這些資訊需要包裝成一個 |dict| 並透過 ime_{plugin-name}#info() 回傳：
>
    function ime_{plugin-name}#info()
        return {
            \ 'type': 'standalone',
            \ 'pattern': '.*',
            \ 'handler': function('ime_{plugin-name}#handler'),
            \ 'icon': '[Pi]',
            \ 'description': "Description",
            \ 'trigger': ['<space>', '3', '4', '6'],
            \ 'choice': ['<key1>', '<key2>', ...],
            \ 'menu': function('ime_{plugin-name}#menu'),
            \ }
    endfunction
<
-------------------------------------------------------------------------------
5.2.1 套件核心 - handler                                 *ime-plugin-handler()*

套件的 handler 需接受兩個參數：
>
    function! ime_{plugin-name}#handler (matchobj, trigger)
<
a:matchobj 為 |matchlist()| 傳入游標行所在文字以及 "pattern" 的比對結果。
a:trigger 為使用者按下的按鍵。

Handler 回傳值需為一個 |list| 或是 |dict|：

- 若回傳 |list| [|string|]，包含可用的選項。
- 若回傳 |dict|，需包含兩個 key：（詳見 |ime-plugin-complex-handler|）

  - 'len': |expr-number|，代表前方被消化的字串長度。
  - 'options': |list| [|string|]，包含可用的選項。

ime.vim 不會對選項排序。

-------------------------------------------------------------------------------
5.2.2 設定選單 - menu                                       *ime-plugin-menu()*

套件的 menu 需接受 0 或 1 個參數：
>
    function! ime_{plugin-name}#menu (...)
<
- 若傳入值為一個（a:0 == 1），則 |a:1| 為使用者按下的按鍵。
  套件根據按鍵決定行為要如何調整。

  - 若 |a:1| 為空字串（''），代表代表使用者切換到別的套件了，
    套件可以選擇在這時候將行為調回預設狀態，也可以保留當下的狀態。

- 若沒有傳入值（a:0 == 0），代表要顯示選單。

  - 回傳值為一個 |list|，每一項為一個 |dict|。
  - dict 需有 "key" 以及 "menu"，分別代表快捷鍵以及說明文字。
  - 若套件不想要有選單，也可以不回傳任何值，直接調整自身行為。

-------------------------------------------------------------------------------
5.3 輸入法圖示                                                     *ime#icon()*

ime#icon({plugin-name}, {icon-str})

{plugin-name}   套件的名稱。ime.vim 只允許當下正在使用的套件更改自己的圖示。
                請參考 |ime-plugin-name|。
{icon-str}      新的圖示。這個參數沒有強制性，只要使用者方便識別即可。

===============================================================================
6.  Vim 7.3 的 script-local function 問題      *ime-plugin-for-vim-7.3-funcref*

根據這個討論串：

http://vim.1045645.n5.nabble.com/Funcref-and-script-local-functions-td1151686.html

Script-local 的函式（|s:| 開頭的函式）是沒辦法正常在外部使用的。
也就是說套件的 handler 不應該宣告為這樣的形式。

但根據測試，在 Vim 7.4 以上，
>
    function("s:Handler")
<
可以成功的拿來宣告為套件的 handler。

如果你想要把 handler 用這個方式隱藏起來，
請記得在文件中註明它和 Vim 7.3 不相容。

===============================================================================
vim:tw=79:ts=8:noet:ft=help:norl:
